% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiFit.R
\name{multiFit}
\alias{multiFit}
\title{Fit models on multiple outcomes.}
\usage{
multiFit(
  xmat,
  ymat,
  xmat_list = NULL,
  method,
  family,
  dist1 = NULL,
  weights = NULL
)
}
\arguments{
\item{xmat}{Matrix of predictors, each row is an observation vector.}

\item{ymat}{Matrix of outcomes.
Quantitative for family = "gaussian".
A factor of two levels for family = "binomial".
A survival object for family = "survival".}

\item{xmat_list}{The user defines a numeric vector to specify the number of subset columns of the xmat.}

\item{method}{Method for fitting models.
It can be one base learner function for all outcomes or a list of base learner functions for each outcome.
The list of all base learners can be obtained by \code{list.learners()}.}

\item{family}{Response type for each response.
If all response variable are within the same family it can be "gaussian", "binomial" or "survival",
otherwise it is a vector with elements "gaussian", "binomial" and "survival" to indicate each response family.}

\item{dist1}{Assumed distribution for response variable.
If the argument is a character string, then it is assumed to name an element from \code{"survreg.distributions"}.
These include "weibull", "exponential", "gaussian", "logistic", "lognormal" and "loglogistic".}

\item{weights}{Weight for response.}
}
\value{
It returns a multiFit object. It is a list of 6 parameters containing information about the fitted models and fitted values for each outcome.
}
\description{
This function fits individual models to predict each outcome separately.
}
\examples{
data("HIV")
set.seed(1)
xmat <- as.matrix(XX)
ymat <- as.matrix(YY)
id <- createFolds(rowMeans(XX), k = 5, list = FALSE)
training_id <- id != 1
y_train <- ymat[training_id, ]
y_test  <- ymat[!training_id, ]
x_train <- xmat[training_id, ]
x_test  <- xmat[!training_id, ]
fit <- multiFit(xmat = x_train, ymat = y_train,
                method = rpart1, family = "gaussian")
pre1 <- predict(fit, x_test)

# Using different base learners for different outcomes
fit_mix_out <- multiFit(xmat = x_train, ymat = y_train,
                       method = c(rpart1, rpart1, lm1, lm1, lm1),
                       family = "gaussian")
pre2 <- predict(fit_mix_out, x_test)
}
